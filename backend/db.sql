-- PostgreSQL commands generated by Cofounder - Genius Postgresql Expert

-- ==========[ TABLE CREATION ]==========

-- ----
-- users Table
-- Stores information about registered individuals (customers and operators).
-- ----
CREATE TABLE users (
    uid VARCHAR(36) PRIMARY KEY NOT NULL,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    role VARCHAR(50) NOT NULL CHECK (role IN ('customer', 'operator')), -- Enforce specific roles
    phone_number VARCHAR(50) NULL,
    email_verified BOOLEAN NOT NULL DEFAULT FALSE,
    created_at BIGINT NOT NULL,
    updated_at BIGINT NOT NULL
);

COMMENT ON TABLE users IS 'Stores information about registered individuals, distinguishing between customers and operators.';
COMMENT ON COLUMN users.uid IS 'Unique identifier for the user (provided by application).';
COMMENT ON COLUMN users.email IS 'User''s unique email address (used for login).';
COMMENT ON COLUMN users.password_hash IS 'Hashed user password.';
COMMENT ON COLUMN users.role IS 'User role (''customer'' or ''operator'').';
COMMENT ON COLUMN users.created_at IS 'Timestamp (Unix epoch milliseconds) of record creation.';
COMMENT ON COLUMN users.updated_at IS 'Timestamp (Unix epoch milliseconds) of last update.';


-- ----
-- food_trucks Table
-- Stores information about each registered food truck business.
-- ----
CREATE TABLE food_trucks (
    uid VARCHAR(36) PRIMARY KEY NOT NULL,
    operator_user_uid VARCHAR(36) UNIQUE NOT NULL, -- One truck per operator for MVP
    name VARCHAR(255) NOT NULL,
    description TEXT NULL,
    cuisine_type VARCHAR(100) NOT NULL,
    logo_url TEXT NULL,
    standard_operating_hours TEXT NULL, -- Storing as TEXT, assuming valid JSON string input from app
    current_status VARCHAR(50) NOT NULL DEFAULT 'offline' CHECK (current_status IN ('offline', 'online', 'paused')),
    location_latitude DOUBLE PRECISION NULL,
    location_longitude DOUBLE PRECISION NULL,
    current_location_address TEXT NULL,
    delivery_enabled BOOLEAN NOT NULL DEFAULT FALSE,
    delivery_fee NUMERIC(10, 2) NULL CHECK (delivery_fee >= 0 OR delivery_fee IS NULL),
    delivery_minimum_order_value NUMERIC(10, 2) NULL CHECK (delivery_minimum_order_value >= 0 OR delivery_minimum_order_value IS NULL),
    delivery_radius_km DOUBLE PRECISION NULL CHECK (delivery_radius_km >= 0 OR delivery_radius_km IS NULL),
    payout_configured_status VARCHAR(50) NOT NULL DEFAULT 'not_configured' CHECK (payout_configured_status IN ('not_configured', 'pending', 'active')),
    average_preparation_minutes INTEGER NOT NULL DEFAULT 15 CHECK (average_preparation_minutes > 0),
    customer_support_phone_number VARCHAR(50) NULL,
    created_at BIGINT NOT NULL,
    updated_at BIGINT NOT NULL,
    CONSTRAINT fk_operator_user FOREIGN KEY(operator_user_uid) REFERENCES users(uid) ON DELETE RESTRICT -- Prevent deleting a user who owns a truck
);

COMMENT ON TABLE food_trucks IS 'Stores information about each registered food truck business.';
COMMENT ON COLUMN food_trucks.uid IS 'Unique identifier for the food truck (provided by application).';
COMMENT ON COLUMN food_trucks.operator_user_uid IS 'Foreign Key referencing users.uid (must have role = ''operator'').';
COMMENT ON COLUMN food_trucks.standard_operating_hours IS 'JSON string storing default hours (e.g., {"Mon": "11:00-15:00", ...}). Managed by application.';
COMMENT ON COLUMN food_trucks.current_status IS 'Current operational status set by operator (''offline'', ''online'', ''paused'').';
COMMENT ON COLUMN food_trucks.payout_configured_status IS 'Status of payout setup via payment gateway (''not_configured'', ''pending'', ''active'').';
COMMENT ON COLUMN food_trucks.average_preparation_minutes IS 'Operator-defined average time in minutes to prepare an order.';
COMMENT ON COLUMN food_trucks.created_at IS 'Timestamp (Unix epoch milliseconds) of record creation.';
COMMENT ON COLUMN food_trucks.updated_at IS 'Timestamp (Unix epoch milliseconds) of last update.';


-- ----
-- addresses Table
-- Stores delivery addresses saved by customers.
-- ----
CREATE TABLE addresses (
    uid VARCHAR(36) PRIMARY KEY NOT NULL,
    customer_user_uid VARCHAR(36) NOT NULL,
    nickname VARCHAR(100) NOT NULL,
    street_address TEXT NOT NULL,
    apt_suite VARCHAR(100) NULL,
    city VARCHAR(100) NOT NULL,
    state VARCHAR(50) NOT NULL,
    zip_code VARCHAR(20) NOT NULL,
    is_default BOOLEAN NOT NULL DEFAULT FALSE,
    created_at BIGINT NOT NULL,
    updated_at BIGINT NOT NULL,
    CONSTRAINT fk_customer_user FOREIGN KEY(customer_user_uid) REFERENCES users(uid) ON DELETE CASCADE -- Delete addresses if customer is deleted
);

COMMENT ON TABLE addresses IS 'Stores delivery addresses saved by customers.';
COMMENT ON COLUMN addresses.uid IS 'Unique identifier for the address (provided by application).';
COMMENT ON COLUMN addresses.customer_user_uid IS 'Foreign Key referencing users.uid (must have role = ''customer'').';
COMMENT ON COLUMN addresses.nickname IS 'User-defined name for the address (e.g., ''Home'', ''Work'').';
COMMENT ON COLUMN addresses.is_default IS 'Whether this is the user''s default delivery address.';
COMMENT ON COLUMN addresses.created_at IS 'Timestamp (Unix epoch milliseconds) of record creation.';
COMMENT ON COLUMN addresses.updated_at IS 'Timestamp (Unix epoch milliseconds) of last update.';


-- ----
-- menu_categories Table
-- Stores menu categories defined by food truck operators.
-- ----
CREATE TABLE menu_categories (
    uid VARCHAR(36) PRIMARY KEY NOT NULL,
    food_truck_uid VARCHAR(36) NOT NULL,
    name VARCHAR(100) NOT NULL,
    display_order INTEGER NOT NULL DEFAULT 0 CHECK (display_order >= 0),
    is_available BOOLEAN NOT NULL DEFAULT TRUE,
    created_at BIGINT NOT NULL,
    updated_at BIGINT NOT NULL,
    CONSTRAINT fk_food_truck FOREIGN KEY(food_truck_uid) REFERENCES food_trucks(uid) ON DELETE CASCADE -- Delete categories if truck is deleted
);

COMMENT ON TABLE menu_categories IS 'Stores menu categories defined by food truck operators.';
COMMENT ON COLUMN menu_categories.uid IS 'Unique identifier for the menu category (provided by application).';
COMMENT ON COLUMN menu_categories.food_truck_uid IS 'Foreign Key referencing food_trucks.uid.';
COMMENT ON COLUMN menu_categories.display_order IS 'Order in which categories appear on the menu.';
COMMENT ON COLUMN menu_categories.is_available IS 'Operator toggle for category availability.';
COMMENT ON COLUMN menu_categories.created_at IS 'Timestamp (Unix epoch milliseconds) of record creation.';
COMMENT ON COLUMN menu_categories.updated_at IS 'Timestamp (Unix epoch milliseconds) of last update.';


-- ----
-- menu_items Table
-- Stores details about individual menu items offered by food trucks.
-- ----
CREATE TABLE menu_items (
    uid VARCHAR(36) PRIMARY KEY NOT NULL,
    food_truck_uid VARCHAR(36) NOT NULL,
    menu_category_uid VARCHAR(36) NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT NULL,
    base_price NUMERIC(10, 2) NOT NULL CHECK (base_price >= 0),
    photo_url TEXT NULL,
    is_available BOOLEAN NOT NULL DEFAULT TRUE,
    display_order INTEGER NOT NULL DEFAULT 0 CHECK (display_order >= 0),
    created_at BIGINT NOT NULL,
    updated_at BIGINT NOT NULL,
    CONSTRAINT fk_food_truck FOREIGN KEY(food_truck_uid) REFERENCES food_trucks(uid) ON DELETE CASCADE, -- Delete items if truck is deleted
    CONSTRAINT fk_menu_category FOREIGN KEY(menu_category_uid) REFERENCES menu_categories(uid) ON DELETE CASCADE -- Delete items if category is deleted
);

COMMENT ON TABLE menu_items IS 'Stores details about individual menu items offered by food trucks.';
COMMENT ON COLUMN menu_items.uid IS 'Unique identifier for the menu item (provided by application).';
COMMENT ON COLUMN menu_items.food_truck_uid IS 'Foreign Key referencing food_trucks.uid.';
COMMENT ON COLUMN menu_items.menu_category_uid IS 'Foreign Key referencing menu_categories.uid.';
COMMENT ON COLUMN menu_items.base_price IS 'Base price of the item.';
COMMENT ON COLUMN menu_items.photo_url IS 'URL to the item''s photo.';
COMMENT ON COLUMN menu_items.is_available IS 'Operator toggle for item availability.';
COMMENT ON COLUMN menu_items.display_order IS 'Order in which items appear within a category.';
COMMENT ON COLUMN menu_items.created_at IS 'Timestamp (Unix epoch milliseconds) of record creation.';
COMMENT ON COLUMN menu_items.updated_at IS 'Timestamp (Unix epoch milliseconds) of last update.';


-- ----
-- modifier_groups Table
-- Stores groups of customization options for a menu item.
-- ----
CREATE TABLE modifier_groups (
    uid VARCHAR(36) PRIMARY KEY NOT NULL,
    menu_item_uid VARCHAR(36) NOT NULL,
    name VARCHAR(100) NOT NULL,
    selection_type VARCHAR(50) NOT NULL CHECK (selection_type IN ('single', 'multiple')), -- How options are selected
    is_required BOOLEAN NOT NULL DEFAULT FALSE,
    created_at BIGINT NOT NULL,
    updated_at BIGINT NOT NULL,
    CONSTRAINT fk_menu_item FOREIGN KEY(menu_item_uid) REFERENCES menu_items(uid) ON DELETE CASCADE -- Delete groups if item is deleted
);

COMMENT ON TABLE modifier_groups IS 'Stores groups of customization options for a menu item (e.g., "Size", "Add-ons").';
COMMENT ON COLUMN modifier_groups.uid IS 'Unique identifier for the modifier group (provided by application).';
COMMENT ON COLUMN modifier_groups.menu_item_uid IS 'Foreign Key referencing menu_items.uid.';
COMMENT ON COLUMN modifier_groups.name IS 'Name of the modifier group (e.g., ''Size'', ''Add Protein'').';
COMMENT ON COLUMN modifier_groups.selection_type IS 'How options are selected (''single'' or ''multiple'').';
COMMENT ON COLUMN modifier_groups.is_required IS 'Whether selecting an option from this group is mandatory.';
COMMENT ON COLUMN modifier_groups.created_at IS 'Timestamp (Unix epoch milliseconds) of record creation.';
COMMENT ON COLUMN modifier_groups.updated_at IS 'Timestamp (Unix epoch milliseconds) of last update.';


-- ----
-- modifier_options Table
-- Stores individual customization options within a group.
-- ----
CREATE TABLE modifier_options (
    uid VARCHAR(36) PRIMARY KEY NOT NULL,
    modifier_group_uid VARCHAR(36) NOT NULL,
    name VARCHAR(100) NOT NULL,
    price_adjustment NUMERIC(10, 2) NOT NULL DEFAULT 0.00 CHECK (price_adjustment >= 0),
    created_at BIGINT NOT NULL,
    updated_at BIGINT NOT NULL,
    CONSTRAINT fk_modifier_group FOREIGN KEY(modifier_group_uid) REFERENCES modifier_groups(uid) ON DELETE CASCADE -- Delete options if group is deleted
);

COMMENT ON TABLE modifier_options IS 'Stores individual customization options within a group (e.g., "Large", "Extra Cheese").';
COMMENT ON COLUMN modifier_options.uid IS 'Unique identifier for the modifier option (provided by application).';
COMMENT ON COLUMN modifier_options.modifier_group_uid IS 'Foreign Key referencing modifier_groups.uid.';
COMMENT ON COLUMN modifier_options.name IS 'Name of the option (e.g., ''Regular'', ''Large'', ''Avocado'').';
COMMENT ON COLUMN modifier_options.price_adjustment IS 'Price added when this option is selected.';
COMMENT ON COLUMN modifier_options.created_at IS 'Timestamp (Unix epoch milliseconds) of record creation.';
COMMENT ON COLUMN modifier_options.updated_at IS 'Timestamp (Unix epoch milliseconds) of last update.';


-- ----
-- orders Table
-- Stores information about each customer order. Central transaction table.
-- ----
CREATE TABLE orders (
    uid VARCHAR(36) PRIMARY KEY NOT NULL,
    customer_user_uid VARCHAR(36) NOT NULL,
    food_truck_uid VARCHAR(36) NOT NULL,
    order_number VARCHAR(50) UNIQUE NOT NULL, -- User-friendly unique order identifier (provided by application)
    status VARCHAR(50) NOT NULL DEFAULT 'pending_confirmation' CHECK (status IN (
        'pending_confirmation', 'accepted', 'rejected', 'preparing',
        'ready_for_pickup', 'out_for_delivery', 'completed', 'delivered',
        'cancelled', 'cancellation_requested'
    )),
    fulfillment_type VARCHAR(50) NOT NULL CHECK (fulfillment_type IN ('pickup', 'delivery')),
    delivery_address_snapshot TEXT NULL, -- JSON snapshot of delivery address (if delivery)
    pickup_location_address_snapshot TEXT NULL, -- Snapshot of truck's address (if pickup)
    special_instructions TEXT NULL,
    subtotal NUMERIC(10, 2) NOT NULL CHECK (subtotal >= 0),
    tax_amount NUMERIC(10, 2) NOT NULL DEFAULT 0.00 CHECK (tax_amount >= 0),
    delivery_fee_charged NUMERIC(10, 2) NOT NULL DEFAULT 0.00 CHECK (delivery_fee_charged >= 0),
    total_amount NUMERIC(10, 2) NOT NULL CHECK (total_amount >= 0),
    payment_gateway_charge_id VARCHAR(255) UNIQUE NOT NULL, -- Provided by payment gateway via application
    order_time BIGINT NOT NULL, -- Timestamp when order placed
    estimated_ready_time BIGINT NULL, -- Estimated pickup readiness timestamp
    estimated_delivery_time BIGINT NULL, -- Estimated delivery timestamp
    preparation_started_at BIGINT NULL, -- Timestamp when status changed to 'preparing'
    ready_or_out_for_delivery_at BIGINT NULL, -- Timestamp when status changed to 'ready_for_pickup' or 'out_for_delivery'
    completed_or_delivered_at BIGINT NULL, -- Timestamp when status changed to 'completed' or 'delivered'
    rejection_reason TEXT NULL, -- Reason if order rejected
    cancellation_reason TEXT NULL, -- Reason if order cancelled after acceptance
    created_at BIGINT NOT NULL,
    updated_at BIGINT NOT NULL,
    CONSTRAINT fk_customer_user FOREIGN KEY(customer_user_uid) REFERENCES users(uid) ON DELETE RESTRICT, -- Prevent deleting user with orders
    CONSTRAINT fk_food_truck FOREIGN KEY(food_truck_uid) REFERENCES food_trucks(uid) ON DELETE RESTRICT -- Prevent deleting truck with orders
);

COMMENT ON TABLE orders IS 'Stores information about each customer order. This is the central transaction table.';
COMMENT ON COLUMN orders.uid IS 'Unique identifier for the order (provided by application).';
COMMENT ON COLUMN orders.customer_user_uid IS 'Foreign Key referencing users.uid (customer who placed the order).';
COMMENT ON COLUMN orders.food_truck_uid IS 'Foreign Key referencing food_trucks.uid (truck fulfilling the order).';
COMMENT ON COLUMN orders.order_number IS 'User-friendly unique order identifier (provided by application).';
COMMENT ON COLUMN orders.status IS 'Current status of the order.';
COMMENT ON COLUMN orders.fulfillment_type IS 'How the order will be fulfilled (''pickup'' or ''delivery'').';
COMMENT ON COLUMN orders.delivery_address_snapshot IS 'JSON snapshot of the delivery address used for this specific order (if fulfillment_type = ''delivery''). Captures street_address, apt_suite, city, state, zip_code.';
COMMENT ON COLUMN orders.pickup_location_address_snapshot IS 'Snapshot of the truck''s address at the time of order placement (if fulfillment_type = ''pickup'').';
COMMENT ON COLUMN orders.special_instructions IS 'Customer notes for the order.';
COMMENT ON COLUMN orders.subtotal IS 'Sum of all item prices before tax and fees.';
COMMENT ON COLUMN orders.tax_amount IS 'Calculated tax amount for the order.';
COMMENT ON COLUMN orders.delivery_fee_charged IS 'Delivery fee applied to this order (0 if pickup).';
COMMENT ON COLUMN orders.total_amount IS 'Final amount charged to the customer (subtotal + tax_amount + delivery_fee_charged).';
COMMENT ON COLUMN orders.payment_gateway_charge_id IS 'Unique identifier for the charge from the payment gateway.';
COMMENT ON COLUMN orders.order_time IS 'Timestamp (Unix epoch milliseconds) when the order was successfully placed.';
COMMENT ON COLUMN orders.estimated_ready_time IS 'Timestamp (Unix epoch milliseconds) indicating estimated pickup readiness.';
COMMENT ON COLUMN orders.estimated_delivery_time IS 'Timestamp (Unix epoch milliseconds) indicating estimated delivery time.';
COMMENT ON COLUMN orders.preparation_started_at IS 'Timestamp (Unix epoch milliseconds) when status changed to ''preparing''.';
COMMENT ON COLUMN orders.ready_or_out_for_delivery_at IS 'Timestamp (Unix epoch milliseconds) when status changed to ''ready_for_pickup'' or ''out_for_delivery''.';
COMMENT ON COLUMN orders.completed_or_delivered_at IS 'Timestamp (Unix epoch milliseconds) when status changed to ''completed'' or ''delivered''.';
COMMENT ON COLUMN orders.rejection_reason IS 'Reason provided by operator if the order was rejected.';
COMMENT ON COLUMN orders.cancellation_reason IS 'Reason provided if the order was cancelled after acceptance.';
COMMENT ON COLUMN orders.created_at IS 'Timestamp (Unix epoch milliseconds) of record creation.';
COMMENT ON COLUMN orders.updated_at IS 'Timestamp (Unix epoch milliseconds) of last update (useful for tracking status changes).';


-- ----
-- order_items Table
-- Stores details about each specific item included in an order (line items).
-- ----
CREATE TABLE order_items (
    uid VARCHAR(36) PRIMARY KEY NOT NULL,
    order_uid VARCHAR(36) NOT NULL,
    menu_item_uid VARCHAR(36) NOT NULL, -- References the menu item definition
    item_name_snapshot VARCHAR(255) NOT NULL, -- Snapshot of item name
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    base_price_snapshot NUMERIC(10, 2) NOT NULL, -- Snapshot of item base price
    total_item_price NUMERIC(10, 2) NOT NULL CHECK (total_item_price >= 0), -- Calculated price for this line item (quantity * (base + options))
    created_at BIGINT NOT NULL,
    updated_at BIGINT NOT NULL,
    CONSTRAINT fk_order FOREIGN KEY(order_uid) REFERENCES orders(uid) ON DELETE CASCADE, -- Delete items if order is deleted
    CONSTRAINT fk_menu_item FOREIGN KEY(menu_item_uid) REFERENCES menu_items(uid) ON DELETE RESTRICT -- Keep item reference even if original menu item changes later? RESTRICT seems safer here than SET NULL. CASCADE could lead to data loss on menu changes.
);

COMMENT ON TABLE order_items IS 'Stores details about each specific item included in an order (line items).';
COMMENT ON COLUMN order_items.uid IS 'Unique identifier for the order item line (provided by application).';
COMMENT ON COLUMN order_items.order_uid IS 'Foreign Key referencing orders.uid.';
COMMENT ON COLUMN order_items.menu_item_uid IS 'Foreign Key referencing menu_items.uid (identifies the base item).';
COMMENT ON COLUMN order_items.item_name_snapshot IS 'Snapshot of the menu item name at the time of order.';
COMMENT ON COLUMN order_items.quantity IS 'Quantity of this specific item ordered.';
COMMENT ON COLUMN order_items.base_price_snapshot IS 'Snapshot of the item''s base price at the time of order.';
COMMENT ON COLUMN order_items.total_item_price IS 'Total price for this line item (quantity * (base_price + sum of option adjustments)). Calculated by application.';
COMMENT ON COLUMN order_items.created_at IS 'Timestamp (Unix epoch milliseconds) of record creation.';
COMMENT ON COLUMN order_items.updated_at IS 'Timestamp (Unix epoch milliseconds) of last update.';


-- ----
-- order_item_options Table
-- Stores details about the specific modifier options selected for an order_item.
-- ----
CREATE TABLE order_item_options (
    uid VARCHAR(36) PRIMARY KEY NOT NULL,
    order_item_uid VARCHAR(36) NOT NULL,
    modifier_option_uid VARCHAR(36) NOT NULL, -- References the modifier option definition
    modifier_group_name_snapshot VARCHAR(100) NOT NULL, -- Snapshot of the parent group name
    option_name_snapshot VARCHAR(100) NOT NULL, -- Snapshot of the selected option name
    price_adjustment_snapshot NUMERIC(10, 2) NOT NULL, -- Snapshot of the option's price adjustment
    created_at BIGINT NOT NULL,
    updated_at BIGINT NOT NULL,
    CONSTRAINT fk_order_item FOREIGN KEY(order_item_uid) REFERENCES order_items(uid) ON DELETE CASCADE, -- Delete selected options if order item is deleted
    CONSTRAINT fk_modifier_option FOREIGN KEY(modifier_option_uid) REFERENCES modifier_options(uid) ON DELETE RESTRICT -- Similar to order_items, RESTRICT seems safer than CASCADE or SET NULL for historical accuracy.
);

COMMENT ON TABLE order_item_options IS 'Stores details about the specific modifier options selected for an order_item.';
COMMENT ON COLUMN order_item_options.uid IS 'Unique identifier for the selected option instance (provided by application).';
COMMENT ON COLUMN order_item_options.order_item_uid IS 'Foreign Key referencing order_items.uid.';
COMMENT ON COLUMN order_item_options.modifier_option_uid IS 'Foreign Key referencing modifier_options.uid.';
COMMENT ON COLUMN order_item_options.modifier_group_name_snapshot IS 'Snapshot of the parent modifier group name (e.g., ''Add-ons'').';
COMMENT ON COLUMN order_item_options.option_name_snapshot IS 'Snapshot of the selected option name (e.g., ''Extra Cheese'').';
COMMENT ON COLUMN order_item_options.price_adjustment_snapshot IS 'Snapshot of the option''s price adjustment at the time of order.';
COMMENT ON COLUMN order_item_options.created_at IS 'Timestamp (Unix epoch milliseconds) of record creation.';
COMMENT ON COLUMN order_item_options.updated_at IS 'Timestamp (Unix epoch milliseconds) of last update.';


-- ----
-- payment_methods Table
-- Stores references to customer saved payment methods (details managed by payment gateway).
-- ----
CREATE TABLE payment_methods (
    uid VARCHAR(36) PRIMARY KEY NOT NULL,
    customer_user_uid VARCHAR(36) NOT NULL,
    payment_gateway_customer_id VARCHAR(255) NOT NULL, -- Customer ID from payment gateway
    payment_gateway_method_id VARCHAR(255) UNIQUE NOT NULL, -- Payment method ID from payment gateway
    card_type VARCHAR(50) NOT NULL, -- e.g., 'Visa', 'Mastercard'
    last_4_digits VARCHAR(4) NOT NULL,
    expiry_month INTEGER NOT NULL CHECK (expiry_month >= 1 AND expiry_month <= 12),
    expiry_year INTEGER NOT NULL CHECK (expiry_year >= 2000),
    -- is_default BOOLEAN NOT NULL DEFAULT FALSE, -- Removed as per DRD comment (maybe over-scoped for MVP)
    created_at BIGINT NOT NULL,
    updated_at BIGINT NOT NULL,
    CONSTRAINT fk_customer_user FOREIGN KEY(customer_user_uid) REFERENCES users(uid) ON DELETE CASCADE -- Delete payment methods if customer is deleted
);

COMMENT ON TABLE payment_methods IS 'Stores references to customer saved payment methods (details managed by payment gateway).';
COMMENT ON COLUMN payment_methods.uid IS 'Unique identifier for the stored payment method (provided by application).';
COMMENT ON COLUMN payment_methods.customer_user_uid IS 'Foreign Key referencing users.uid (customer owning this method).';
COMMENT ON COLUMN payment_methods.payment_gateway_customer_id IS 'Customer ID from the payment gateway (e.g., Stripe Customer ID).';
COMMENT ON COLUMN payment_methods.payment_gateway_method_id IS 'Payment method ID from the payment gateway (e.g., Stripe PaymentMethod ID).';
COMMENT ON COLUMN payment_methods.card_type IS 'Type of card (e.g., ''Visa'', ''Mastercard'') - provided by gateway.';
COMMENT ON COLUMN payment_methods.last_4_digits IS 'Last 4 digits of the card number - provided by gateway.';
COMMENT ON COLUMN payment_methods.expiry_month IS 'Card expiry month (1-12) - provided by gateway.';
COMMENT ON COLUMN payment_methods.expiry_year IS 'Card expiry year (e.g., 2025) - provided by gateway.';
COMMENT ON COLUMN payment_methods.created_at IS 'Timestamp (Unix epoch milliseconds) of record creation.';
COMMENT ON COLUMN payment_methods.updated_at IS 'Timestamp (Unix epoch milliseconds) of last update.';


-- ==========[ SEED DATA ]==========

-- Define base timestamp (approx Nov 15, 2023 00:00:00 GMT in milliseconds)
-- Use variations around this for realistic timing.
-- DO $$ -- Using a DO block to define a variable is possible but adds complexity. Hardcoding is simpler for seed scripts.
-- DECLARE base_ts BIGINT := 1700000000000;
-- BEGIN

-- ----
-- Seed Users
-- ----
INSERT INTO users (uid, first_name, last_name, email, password_hash, role, phone_number, email_verified, created_at, updated_at) VALUES
('user_c1', 'Chloe', 'Davis', 'chloe.d@example.com', '$2b$10$abcdefghijklmnopqrstuv', 'customer', '555-123-4567', true, 1700000000000, 1700000000000),
('user_c2', 'Bob', 'Smith', 'bob.s@example.com', '$2b$10$bcdefghijklmnopqrstuvw', 'customer', '555-987-6543', true, 1700001000000, 1700001000000),
('user_c3', 'Alice', 'Jones', 'alice.j@example.com', '$2b$10$cdefghijklmnopqrstuvwx', 'customer', NULL, true, 1700002000000, 1700002000000),
('user_o1', 'Tony', 'Stark', 'tony.s@example.com', '$2b$10$defghijklmnopqrstuvwxy', 'operator', '555-111-2222', true, 1700003000000, 1700003000000),
('user_o2', 'Pepper', 'Potts', 'pepper.p@example.com', '$2b$10$efghijklmnopqrstuvwxyz', 'operator', '555-333-4444', true, 1700004000000, 1700004000000);

-- ----
-- Seed Food Trucks
-- ----
INSERT INTO food_trucks (uid, operator_user_uid, name, description, cuisine_type, logo_url, standard_operating_hours, current_status, location_latitude, location_longitude, current_location_address, delivery_enabled, delivery_fee, delivery_minimum_order_value, delivery_radius_km, payout_configured_status, average_preparation_minutes, customer_support_phone_number, created_at, updated_at) VALUES
('truck_t1', 'user_o1', 'Tony''s Tacos', 'Authentic street tacos, burritos, and quesadillas. Taste the difference!', 'Mexican', 'https://picsum.photos/seed/truck1logo/200/200', '{"Mon": "11:00-15:00", "Tue": "11:00-15:00", "Wed": "11:00-15:00", "Thu": "11:00-20:00", "Fri": "11:00-20:00", "Sat": "12:00-18:00", "Sun": "closed"}', 'online', 34.0522, -118.2437, '123 Main St, Los Angeles, CA 90012', true, 3.00, 15.00, 5.0, 'active', 10, '555-111-3333', 1700003100000, 1700100000000),
('truck_p1', 'user_o2', 'Pepper''s Pizza Pies', 'Delicious wood-fired pizzas, fresh salads, and refreshing drinks.', 'Pizza', 'https://picsum.photos/seed/truck2logo/200/200', '{"Mon": "closed", "Tue": "16:00-21:00", "Wed": "16:00-21:00", "Thu": "16:00-21:00", "Fri": "12:00-22:00", "Sat": "12:00-22:00", "Sun": "12:00-20:00"}', 'online', 34.0567, -118.2510, '456 Market St, Los Angeles, CA 90013', true, 4.50, 20.00, 8.0, 'active', 20, '555-333-5555', 1700004100000, 1700101000000);

-- ----
-- Seed Addresses
-- ----
INSERT INTO addresses (uid, customer_user_uid, nickname, street_address, apt_suite, city, state, zip_code, is_default, created_at, updated_at) VALUES
('addr_c1_h', 'user_c1', 'Home', '456 Oak Avenue', 'Apt 2B', 'Metropolis', 'CA', '90210', true, 1700000100000, 1700000100000),
('addr_c1_w', 'user_c1', 'Work', '789 Pine Street', 'Suite 100', 'Metropolis', 'CA', '90211', false, 1700000200000, 1700000200000),
('addr_c2_h', 'user_c2', 'Home', '101 Maple Drive', NULL, 'Gotham', 'NY', '10001', true, 1700001100000, 1700001100000);

-- ----
-- Seed Payment Methods
-- ----
INSERT INTO payment_methods (uid, customer_user_uid, payment_gateway_customer_id, payment_gateway_method_id, card_type, last_4_digits, expiry_month, expiry_year, created_at, updated_at) VALUES
('pay_c1_v', 'user_c1', 'cus_L1abc123', 'pm_1KVabc123', 'Visa', '4242', 12, 2025, 1700000300000, 1700000300000),
('pay_c1_m', 'user_c1', 'cus_L1abc123', 'pm_1KVdef456', 'Mastercard', '5555', 10, 2026, 1700000400000, 1700000400000),
('pay_c2_v', 'user_c2', 'cus_L2xyz789', 'pm_1KVghi789', 'Visa', '1111', 8, 2024, 1700001200000, 1700001200000);

-- ----
-- Seed Truck 1 (Tony's Tacos) Menu
-- ----
-- Categories
INSERT INTO menu_categories (uid, food_truck_uid, name, display_order, is_available, created_at, updated_at) VALUES
('cat_t1_tacos', 'truck_t1', 'Tacos', 1, true, 1700003200000, 1700003200000),
('cat_t1_burritos', 'truck_t1', 'Burritos', 2, true, 1700003300000, 1700003300000),
('cat_t1_sides', 'truck_t1', 'Sides', 3, true, 1700003400000, 1700003400000),
('cat_t1_drinks', 'truck_t1', 'Drinks', 4, true, 1700003500000, 1700003500000);

-- Items - Tacos
INSERT INTO menu_items (uid, food_truck_uid, menu_category_uid, name, description, base_price, photo_url, is_available, display_order, created_at, updated_at) VALUES
('item_t1_taco_carne', 'truck_t1', 'cat_t1_tacos', 'Carne Asada Taco', 'Grilled steak, onions, cilantro on corn tortilla.', 3.50, 'https://picsum.photos/seed/taco_carne/200/300', true, 1, 1700003600000, 1700003600000),
('item_t1_taco_pollo', 'truck_t1', 'cat_t1_tacos', 'Pollo Asado Taco', 'Grilled chicken, onions, cilantro on corn tortilla.', 3.25, 'https://picsum.photos/seed/taco_pollo/200/300', true, 2, 1700003700000, 1700003700000),
('item_t1_taco_pastor', 'truck_t1', 'cat_t1_tacos', 'Al Pastor Taco', 'Marinated pork, pineapple, onions, cilantro on corn tortilla.', 3.50, 'https://picsum.photos/seed/taco_pastor/200/300', false, 3, 1700003800000, 1700053800000); -- Temporarily unavailable

-- Items - Burritos
INSERT INTO menu_items (uid, food_truck_uid, menu_category_uid, name, description, base_price, photo_url, is_available, display_order, created_at, updated_at) VALUES
('item_t1_burrito_bean', 'truck_t1', 'cat_t1_burritos', 'Bean & Cheese Burrito', 'Refried beans and melted cheese in a flour tortilla.', 6.00, 'https://picsum.photos/seed/burrito_bean/200/300', true, 1, 1700003900000, 1700003900000),
('item_t1_burrito_cali', 'truck_t1', 'cat_t1_burritos', 'California Burrito', 'Carne asada, french fries, cheese, guacamole, sour cream.', 10.50, 'https://picsum.photos/seed/burrito_cali/200/300', true, 2, 1700004000000, 1700004000000);

-- Items - Sides
INSERT INTO menu_items (uid, food_truck_uid, menu_category_uid, name, description, base_price, photo_url, is_available, display_order, created_at, updated_at) VALUES
('item_t1_side_chips', 'truck_t1', 'cat_t1_sides', 'Chips & Salsa', 'Crispy tortilla chips with house-made salsa.', 3.00, 'https://picsum.photos/seed/side_chips/200/300', true, 1, 1700004100000, 1700004100000),
('item_t1_side_guac', 'truck_t1', 'cat_t1_sides', 'Guacamole Side', 'Fresh avocado, onion, cilantro, lime.', 2.50, 'https://picsum.photos/seed/side_guac/200/300', true, 2, 1700004200000, 1700004200000);

-- Items - Drinks
INSERT INTO menu_items (uid, food_truck_uid, menu_category_uid, name, description, base_price, photo_url, is_available, display_order, created_at, updated_at) VALUES
('item_t1_drink_coke', 'truck_t1', 'cat_t1_drinks', 'Coca-Cola', 'Classic Coke can.', 1.50, NULL, true, 1, 1700004300000, 1700004300000),
('item_t1_drink_horchata', 'truck_t1', 'cat_t1_drinks', 'Horchata', 'Sweet rice milk drink.', 3.00, NULL, true, 2, 1700004400000, 1700004400000);

-- Modifiers - Carne Asada Taco
INSERT INTO modifier_groups (uid, menu_item_uid, name, selection_type, is_required, created_at, updated_at) VALUES
('modgrp_t1_taco_carne_addons', 'item_t1_taco_carne', 'Add-ons', 'multiple', false, 1700004500000, 1700004500000);
INSERT INTO modifier_options (uid, modifier_group_uid, name, price_adjustment, created_at, updated_at) VALUES
('modopt_t1_taco_carne_cheese', 'modgrp_t1_taco_carne_addons', 'Extra Cheese', 0.50, 1700004600000, 1700004600000),
('modopt_t1_taco_carne_guac', 'modgrp_t1_taco_carne_addons', 'Guacamole', 1.00, 1700004700000, 1700004700000),
('modopt_t1_taco_carne_sourcream', 'modgrp_t1_taco_carne_addons', 'Sour Cream', 0.50, 1700004800000, 1700004800000);

-- Modifiers - California Burrito
INSERT INTO modifier_groups (uid, menu_item_uid, name, selection_type, is_required, created_at, updated_at) VALUES
('modgrp_t1_burrito_cali_spicy', 'item_t1_burrito_cali', 'Make it Spicy?', 'single', false, 1700004900000, 1700004900000);
INSERT INTO modifier_options (uid, modifier_group_uid, name, price_adjustment, created_at, updated_at) VALUES
('modopt_t1_burrito_cali_jalapenos', 'modgrp_t1_burrito_cali_spicy', 'Add Jalapenos', 0.75, 1700005000000, 1700005000000),
('modopt_t1_burrito_cali_hotsauce', 'modgrp_t1_burrito_cali_spicy', 'Add Hot Sauce', 0.50, 1700005100000, 1700005100000);


-- ----
-- Seed Truck 2 (Pepper's Pizza) Menu
-- ----
-- Categories
INSERT INTO menu_categories (uid, food_truck_uid, name, display_order, is_available, created_at, updated_at) VALUES
('cat_p1_pizza', 'truck_p1', 'Pizzas', 1, true, 1700005200000, 1700005200000),
('cat_p1_salads', 'truck_p1', 'Salads', 2, true, 1700005300000, 1700005300000),
('cat_p1_drinks', 'truck_p1', 'Drinks', 3, true, 1700005400000, 1700005400000);

-- Items - Pizza
INSERT INTO menu_items (uid, food_truck_uid, menu_category_uid, name, description, base_price, photo_url, is_available, display_order, created_at, updated_at) VALUES
('item_p1_pizza_margh', 'truck_p1', 'cat_p1_pizza', 'Margherita Pizza', 'Tomato sauce, fresh mozzarella, basil.', 12.00, 'https://picsum.photos/seed/pizza_margh/200/300', true, 1, 1700005500000, 1700005500000),
('item_p1_pizza_pepp', 'truck_p1', 'cat_p1_pizza', 'Pepperoni Pizza', 'Classic pepperoni and mozzarella.', 14.00, 'https://picsum.photos/seed/pizza_pepp/200/300', true, 2, 1700005600000, 1700005600000),
('item_p1_pizza_veggie', 'truck_p1', 'cat_p1_pizza', 'Veggie Delight Pizza', 'Mushrooms, onions, peppers, olives, mozzarella.', 13.50, 'https://picsum.photos/seed/pizza_veggie/200/300', true, 3, 1700005700000, 1700005700000);

-- Items - Salads
INSERT INTO menu_items (uid, food_truck_uid, menu_category_uid, name, description, base_price, photo_url, is_available, display_order, created_at, updated_at) VALUES
('item_p1_salad_caesar', 'truck_p1', 'cat_p1_salads', 'Caesar Salad', 'Romaine, parmesan, croutons, Caesar dressing.', 8.00, 'https://picsum.photos/seed/salad_caesar/200/300', true, 1, 1700005800000, 1700005800000),
('item_p1_salad_garden', 'truck_p1', 'cat_p1_salads', 'Garden Salad', 'Mixed greens, tomato, cucumber, choice of dressing.', 7.00, 'https://picsum.photos/seed/salad_garden/200/300', true, 2, 1700005900000, 1700005900000);

-- Items - Drinks
INSERT INTO menu_items (uid, food_truck_uid, menu_category_uid, name, description, base_price, photo_url, is_available, display_order, created_at, updated_at) VALUES
('item_p1_drink_water', 'truck_p1', 'cat_p1_drinks', 'Bottled Water', 'Pure refreshing water.', 1.00, NULL, true, 1, 1700006000000, 1700006000000),
('item_p1_drink_lemonade', 'truck_p1', 'cat_p1_drinks', 'Fresh Lemonade', 'House-made lemonade.', 3.50, NULL, true, 2, 1700006100000, 1700006100000);

-- Modifiers - Pepperoni Pizza
INSERT INTO modifier_groups (uid, menu_item_uid, name, selection_type, is_required, created_at, updated_at) VALUES
('modgrp_p1_pizza_pepp_size', 'item_p1_pizza_pepp', 'Size', 'single', true, 1700006200000, 1700006200000),
('modgrp_p1_pizza_pepp_toppings', 'item_p1_pizza_pepp', 'Extra Toppings', 'multiple', false, 1700006300000, 1700006300000);
INSERT INTO modifier_options (uid, modifier_group_uid, name, price_adjustment, created_at, updated_at) VALUES
('modopt_p1_pizza_pepp_size_10', 'modgrp_p1_pizza_pepp_size', '10"', 0.00, 1700006400000, 1700006400000), -- Base price is for 10"
('modopt_p1_pizza_pepp_size_14', 'modgrp_p1_pizza_pepp_size', '14"', 4.00, 1700006500000, 1700006500000),
('modopt_p1_pizza_pepp_top_mush', 'modgrp_p1_pizza_pepp_toppings', 'Mushrooms', 1.50, 1700006600000, 1700006600000),
('modopt_p1_pizza_pepp_top_onion', 'modgrp_p1_pizza_pepp_toppings', 'Onions', 1.00, 1700006700000, 1700006700000),
('modopt_p1_pizza_pepp_top_xtra', 'modgrp_p1_pizza_pepp_toppings', 'Extra Pepperoni', 2.00, 1700006800000, 1700006800000);

-- Modifiers - Caesar Salad
INSERT INTO modifier_groups (uid, menu_item_uid, name, selection_type, is_required, created_at, updated_at) VALUES
('modgrp_p1_salad_caesar_protein', 'item_p1_salad_caesar', 'Add Protein', 'single', false, 1700006900000, 1700006900000);
INSERT INTO modifier_options (uid, modifier_group_uid, name, price_adjustment, created_at, updated_at) VALUES
('modopt_p1_salad_caesar_prot_chick', 'modgrp_p1_salad_caesar_protein', 'Grilled Chicken', 4.00, 1700007000000, 1700007000000),
('modopt_p1_salad_caesar_prot_shrimp', 'modgrp_p1_salad_caesar_protein', 'Shrimp', 5.00, 1700007100000, 1700007100000);


-- ----
-- Seed Orders
-- ----
-- Assume Tax Rate = 9% for simplicity in calculations. App logic would handle real tax calculation.
-- Base Timestamps for orders: Incrementing slightly for realism.
-- Order 1: Cust 1 -> Truck 1 (Pickup, completed) - 2 Carne Asada Tacos + Guac
INSERT INTO orders (uid, customer_user_uid, food_truck_uid, order_number, status, fulfillment_type, delivery_address_snapshot, pickup_location_address_snapshot, special_instructions, subtotal, tax_amount, delivery_fee_charged, total_amount, payment_gateway_charge_id, order_time, estimated_ready_time, estimated_delivery_time, preparation_started_at, ready_or_out_for_delivery_at, completed_or_delivered_at, rejection_reason, cancellation_reason, created_at, updated_at) VALUES
('order_1', 'user_c1', 'truck_t1', 'STX-1001', 'completed', 'pickup', NULL, '123 Main St, Los Angeles, CA 90012', 'Extra cilantro please!', 9.00, 0.81, 0.00, 9.81, 'ch_1abc001', 1700110000000, 1700110600000, NULL, 1700110100000, 1700110500000, 1700110800000, NULL, NULL, 1700110000000, 1700110800000);
INSERT INTO order_items (uid, order_uid, menu_item_uid, item_name_snapshot, quantity, base_price_snapshot, total_item_price, created_at, updated_at) VALUES
('orderitem_1_1', 'order_1', 'item_t1_taco_carne', 'Carne Asada Taco', 2, 3.50, 9.00, 1700110000000, 1700110000000); -- 2 * (3.50 + 1.00)
INSERT INTO order_item_options (uid, order_item_uid, modifier_option_uid, modifier_group_name_snapshot, option_name_snapshot, price_adjustment_snapshot, created_at, updated_at) VALUES
('orderitemoption_1_1_1', 'orderitem_1_1', 'modopt_t1_taco_carne_guac', 'Add-ons', 'Guacamole', 1.00, 1700110000000, 1700110000000);

-- Order 2: Cust 1 -> Truck 2 (Delivery, preparing) - 1 Pepperoni Pizza (14") + Extra Pepp
INSERT INTO orders (uid, customer_user_uid, food_truck_uid, order_number, status, fulfillment_type, delivery_address_snapshot, pickup_location_address_snapshot, special_instructions, subtotal, tax_amount, delivery_fee_charged, total_amount, payment_gateway_charge_id, order_time, estimated_ready_time, estimated_delivery_time, preparation_started_at, ready_or_out_for_delivery_at, completed_or_delivered_at, rejection_reason, cancellation_reason, created_at, updated_at) VALUES
('order_2', 'user_c1', 'truck_p1', 'STX-1002', 'preparing', 'delivery', '{"street_address": "456 Oak Avenue", "apt_suite": "Apt 2B", "city": "Metropolis", "state": "CA", "zip_code": "90210"}', NULL, 'Well done crust please', 20.00, 1.80, 4.50, 26.30, 'ch_1abc002', 1700120000000, NULL, 1700122400000, 1700120500000, NULL, NULL, NULL, NULL, 1700120000000, 1700120500000);
INSERT INTO order_items (uid, order_uid, menu_item_uid, item_name_snapshot, quantity, base_price_snapshot, total_item_price, created_at, updated_at) VALUES
('orderitem_2_1', 'order_2', 'item_p1_pizza_pepp', 'Pepperoni Pizza', 1, 14.00, 20.00, 1700120000000, 1700120000000); -- 1 * (14.00 + 4.00 [size] + 2.00 [xtra pep])
INSERT INTO order_item_options (uid, order_item_uid, modifier_option_uid, modifier_group_name_snapshot, option_name_snapshot, price_adjustment_snapshot, created_at, updated_at) VALUES
('orderitemoption_2_1_1', 'orderitem_2_1', 'modopt_p1_pizza_pepp_size_14', 'Size', '14"', 4.00, 1700120000000, 1700120000000),
('orderitemoption_2_1_2', 'orderitem_2_1', 'modopt_p1_pizza_pepp_top_xtra', 'Extra Toppings', 'Extra Pepperoni', 2.00, 1700120000000, 1700120000000);

-- Order 3: Cust 2 -> Truck 1 (Pickup, ready_for_pickup) - 1 Cali Burrito + Jalapenos
INSERT INTO orders (uid, customer_user_uid, food_truck_uid, order_number, status, fulfillment_type, delivery_address_snapshot, pickup_location_address_snapshot, special_instructions, subtotal, tax_amount, delivery_fee_charged, total_amount, payment_gateway_charge_id, order_time, estimated_ready_time, estimated_delivery_time, preparation_started_at, ready_or_out_for_delivery_at, completed_or_delivered_at, rejection_reason, cancellation_reason, created_at, updated_at) VALUES
('order_3', 'user_c2', 'truck_t1', 'STX-1003', 'ready_for_pickup', 'pickup', NULL, '123 Main St, Los Angeles, CA 90012', NULL, 11.25, 1.01, 0.00, 12.26, 'ch_1abc003', 1700130000000, 1700130900000, NULL, 1700130200000, 1700130800000, NULL, NULL, NULL, 1700130000000, 1700130800000);
INSERT INTO order_items (uid, order_uid, menu_item_uid, item_name_snapshot, quantity, base_price_snapshot, total_item_price, created_at, updated_at) VALUES
('orderitem_3_1', 'order_3', 'item_t1_burrito_cali', 'California Burrito', 1, 10.50, 11.25, 1700130000000, 1700130000000); -- 1 * (10.50 + 0.75)
INSERT INTO order_item_options (uid, order_item_uid, modifier_option_uid, modifier_group_name_snapshot, option_name_snapshot, price_adjustment_snapshot, created_at, updated_at) VALUES
('orderitemoption_3_1_1', 'orderitem_3_1', 'modopt_t1_burrito_cali_jalapenos', 'Make it Spicy?', 'Add Jalapenos', 0.75, 1700130000000, 1700130000000);

-- Order 4: Cust 3 -> Truck 2 (Delivery, out_for_delivery) - 1 Caesar Salad + Chicken, 1 Water
INSERT INTO orders (uid, customer_user_uid, food_truck_uid, order_number, status, fulfillment_type, delivery_address_snapshot, pickup_location_address_snapshot, special_instructions, subtotal, tax_amount, delivery_fee_charged, total_amount, payment_gateway_charge_id, order_time, estimated_ready_time, estimated_delivery_time, preparation_started_at, ready_or_out_for_delivery_at, completed_or_delivered_at, rejection_reason, cancellation_reason, created_at, updated_at) VALUES
('order_4', 'user_c3', 'truck_p1', 'STX-1004', 'out_for_delivery', 'delivery', '{"street_address": "200 Park Place", "apt_suite": null, "city": "Los Angeles", "state": "CA", "zip_code": "90014"}', NULL, 'Leave at front desk', 13.00, 1.17, 4.50, 18.67, 'ch_1abc004', 1700140000000, NULL, 1700142400000, 1700140600000, 1700141800000, NULL, NULL, NULL, 1700140000000, 1700141800000);
INSERT INTO order_items (uid, order_uid, menu_item_uid, item_name_snapshot, quantity, base_price_snapshot, total_item_price, created_at, updated_at) VALUES
('orderitem_4_1', 'order_4', 'item_p1_salad_caesar', 'Caesar Salad', 1, 8.00, 12.00, 1700140000000, 1700140000000), -- 1 * (8.00 + 4.00)
('orderitem_4_2', 'order_4', 'item_p1_drink_water', 'Bottled Water', 1, 1.00, 1.00, 1700140000000, 1700140000000);
INSERT INTO order_item_options (uid, order_item_uid, modifier_option_uid, modifier_group_name_snapshot, option_name_snapshot, price_adjustment_snapshot, created_at, updated_at) VALUES
('orderitemoption_4_1_1', 'orderitem_4_1', 'modopt_p1_salad_caesar_prot_chick', 'Add Protein', 'Grilled Chicken', 4.00, 1700140000000, 1700140000000);

-- Order 5: Cust 1 -> Truck 1 (Delivery, pending_confirmation) - 1 Pollo Taco
INSERT INTO orders (uid, customer_user_uid, food_truck_uid, order_number, status, fulfillment_type, delivery_address_snapshot, pickup_location_address_snapshot, special_instructions, subtotal, tax_amount, delivery_fee_charged, total_amount, payment_gateway_charge_id, order_time, estimated_ready_time, estimated_delivery_time, preparation_started_at, ready_or_out_for_delivery_at, completed_or_delivered_at, rejection_reason, cancellation_reason, created_at, updated_at) VALUES
('order_5', 'user_c1', 'truck_t1', 'STX-1005', 'pending_confirmation', 'delivery', '{"street_address": "789 Pine Street", "apt_suite": "Suite 100", "city": "Metropolis", "state": "CA", "zip_code": "90211"}', NULL, NULL, 3.25, 0.29, 3.00, 6.54, 'ch_1abc005', 1700150000000, NULL, 1700151500000, NULL, NULL, NULL, NULL, NULL, 1700150000000, 1700150000000);
INSERT INTO order_items (uid, order_uid, menu_item_uid, item_name_snapshot, quantity, base_price_snapshot, total_item_price, created_at, updated_at) VALUES
('orderitem_5_1', 'order_5', 'item_t1_taco_pollo', 'Pollo Asado Taco', 1, 3.25, 3.25, 1700150000000, 1700150000000);

-- Order 6: Cust 2 -> Truck 2 (Pickup, accepted) - 1 Margherita Pizza
INSERT INTO orders (uid, customer_user_uid, food_truck_uid, order_number, status, fulfillment_type, delivery_address_snapshot, pickup_location_address_snapshot, special_instructions, subtotal, tax_amount, delivery_fee_charged, total_amount, payment_gateway_charge_id, order_time, estimated_ready_time, estimated_delivery_time, preparation_started_at, ready_or_out_for_delivery_at, completed_or_delivered_at, rejection_reason, cancellation_reason, created_at, updated_at) VALUES
('order_6', 'user_c2', 'truck_p1', 'STX-1006', 'accepted', 'pickup', NULL, '456 Market St, Los Angeles, CA 90013', 'Light sauce', 12.00, 1.08, 0.00, 13.08, 'ch_1abc006', 1700160000000, 1700161500000, NULL, NULL, NULL, NULL, NULL, NULL, 1700160000000, 1700160100000);
INSERT INTO order_items (uid, order_uid, menu_item_uid, item_name_snapshot, quantity, base_price_snapshot, total_item_price, created_at, updated_at) VALUES
('orderitem_6_1', 'order_6', 'item_p1_pizza_margh', 'Margherita Pizza', 1, 12.00, 12.00, 1700160000000, 1700160000000);

-- Order 7: Cust 3 -> Truck 1 (Delivery, delivered) - 1 Bean Burrito, 1 Horchata
INSERT INTO orders (uid, customer_user_uid, food_truck_uid, order_number, status, fulfillment_type, delivery_address_snapshot, pickup_location_address_snapshot, special_instructions, subtotal, tax_amount, delivery_fee_charged, total_amount, payment_gateway_charge_id, order_time, estimated_ready_time, estimated_delivery_time, preparation_started_at, ready_or_out_for_delivery_at, completed_or_delivered_at, rejection_reason, cancellation_reason, created_at, updated_at) VALUES
('order_7', 'user_c3', 'truck_t1', 'STX-1007', 'delivered', 'delivery', '{"street_address": "300 Elm St", "apt_suite": null, "city": "Los Angeles", "state": "CA", "zip_code": "90015"}', NULL, NULL, 9.00, 0.81, 3.00, 12.81, 'ch_1abc007', 1700170000000, NULL, 1700171800000, 1700170200000, 1700171000000, 1700171500000, NULL, NULL, 1700170000000, 1700171500000);
INSERT INTO order_items (uid, order_uid, menu_item_uid, item_name_snapshot, quantity, base_price_snapshot, total_item_price, created_at, updated_at) VALUES
('orderitem_7_1', 'order_7', 'item_t1_burrito_bean', 'Bean & Cheese Burrito', 1, 6.00, 6.00, 1700170000000, 1700170000000),
('orderitem_7_2', 'order_7', 'item_t1_drink_horchata', 'Horchata', 1, 3.00, 3.00, 1700170000000, 1700170000000);

-- Order 8: Cust 1 -> Truck 2 (Pickup, cancelled) - 1 Garden Salad
INSERT INTO orders (uid, customer_user_uid, food_truck_uid, order_number, status, fulfillment_type, delivery_address_snapshot, pickup_location_address_snapshot, special_instructions, subtotal, tax_amount, delivery_fee_charged, total_amount, payment_gateway_charge_id, order_time, estimated_ready_time, estimated_delivery_time, preparation_started_at, ready_or_out_for_delivery_at, completed_or_delivered_at, rejection_reason, cancellation_reason, created_at, updated_at) VALUES
('order_8', 'user_c1', 'truck_p1', 'STX-1008', 'cancelled', 'pickup', NULL, '456 Market St, Los Angeles, CA 90013', NULL, 7.00, 0.63, 0.00, 7.63, 'ch_1abc008', 1700180000000, 1700180900000, NULL, NULL, NULL, NULL, NULL, 'Operator ran out of lettuce.', 1700180000000, 1700180500000);
INSERT INTO order_items (uid, order_uid, menu_item_uid, item_name_snapshot, quantity, base_price_snapshot, total_item_price, created_at, updated_at) VALUES
('orderitem_8_1', 'order_8', 'item_p1_salad_garden', 'Garden Salad', 1, 7.00, 7.00, 1700180000000, 1700180000000);

-- Order 9: Cust 2 -> Truck 1 (Delivery, rejected) - 1 Carne Asada Taco (Attempted)
INSERT INTO orders (uid, customer_user_uid, food_truck_uid, order_number, status, fulfillment_type, delivery_address_snapshot, pickup_location_address_snapshot, special_instructions, subtotal, tax_amount, delivery_fee_charged, total_amount, payment_gateway_charge_id, order_time, estimated_ready_time, estimated_delivery_time, preparation_started_at, ready_or_out_for_delivery_at, completed_or_delivered_at, rejection_reason, cancellation_reason, created_at, updated_at) VALUES
('order_9', 'user_c2', 'truck_t1', 'STX-1009', 'rejected', 'delivery', '{"street_address": "101 Maple Drive", "apt_suite": null, "city": "Gotham", "state": "NY", "zip_code": "10001"}', NULL, NULL, 3.50, 0.32, 3.00, 6.82, 'ch_1abc009', 1700190000000, NULL, 1700191500000, NULL, NULL, NULL, 'Too busy to fulfill new orders right now.', NULL, 1700190000000, 1700190100000);
INSERT INTO order_items (uid, order_uid, menu_item_uid, item_name_snapshot, quantity, base_price_snapshot, total_item_price, created_at, updated_at) VALUES
('orderitem_9_1', 'order_9', 'item_t1_taco_carne', 'Carne Asada Taco', 1, 3.50, 3.50, 1700190000000, 1700190000000);

-- END; -- End DO block if used
-- $$;

-- ==========[ END OF SCRIPT ]==========